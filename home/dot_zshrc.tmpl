export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CACHE_HOME=$HOME/.cache

# If you come from bash you might have to change your $PATH.
# Ensure local bin is tried before platform..
{{- $paths := list }}
{{- $homeDir := .chezmoi.homeDir }}
{{- range $_, $relPath := list "bin" "go/bin" ".cargo/bin" ".local/bin" }}
{{-    $path := joinPath "$HOME" $relPath }}
{{-    $paths = mustAppend $paths $path }}
{{- end }}
{{- if $paths }}
export PATH={{ toStrings $paths | join ":" }}:$PATH
{{- end }}

{{- if eq .chezmoi.os "darwin" }}
eval "$(/opt/homebrew/bin/brew shellenv)"
{{- end }}

export ZSH="$HOME/.oh-my-zsh"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

plugins=(
  git
{{- range .zshPlugins }}
  {{ . }}
{{- end }}
)

source $ZSH/oh-my-zsh.sh

setopt autocd
setopt histignorespace
setopt rm_star_silent

autoload -Uz +X compinit && compinit
autoload -Uz +X bashcompinit && bashcompinit


{{- if lookPath "bat" }}
alias cat=bat
{{- else if lookPath "batcat" }}
alias cat=batcat
{{- end }}
{{- if lookPath "fdfind" }}
alias fd=fdfind
{{- end }}

{{ if stat (printf "%s/.local/bin/nvim" .chezmoi.homeDir) -}}
export EDITOR=$HOME/.local/bin/nvim
alias vim=$HOME/.local/bin/nvim
{{ else if lookPath "nvim" -}}
export EDITOR=nvim
alias vim=nvim
{{ else -}}
export EDITOR=vim
{{ end -}}

{{- if lookPath "eza" }}
alias ls="eza --long --color=always --icons=always"
alias lsdef="ls"
{{- end }}
alias tarz="tar -zxvf"
alias reloadzsh="source ~/.zshrc"
alias gcm="git commit -m"
alias gdc="git diff --cached"
alias gs="git status"
alias fman="compgen -c | fzf | xargs man"
alias dockerbash="docker run -it --entrypoint /bin/bash --no-healthcheck"

function showdiff {
    git diff $1~ $1
}

{{ if lookPath "bw" -}}
function fetchgpg {
    bw login
    BW_SESSION=$(bw unlock --raw)

    if [[ $1 == "gh" ]]; then
        GPG_KEY=$(bw get notes "GH GPG PKey")
    elif [[ $1 == "work" ]]; then
        GPG_KEY=$(bw get notes "Work GPG PKey")
    else
        echo "Invalid argument. Use 'gh' for GitHub or 'work' for Work."
        return 1
    fi

    if [ -z "$GPG_KEY" ]; then
        echo "Failed to retrieve GPG key from Bitwarden"
        exit 1
    fi

    EMAIL=$(echo "$GPG_KEY" | grep -oP '(?<=<).*(?=>)')

    echo "Importing GPG key"
    # Save the GPG key to a temporary file
    TMP_KEY_FILE=$(mktemp)
    echo "$GPG_KEY" > "$TMP_KEY_FILE"

    # Import the GPG key
    gpg --import "$TMP_KEY_FILE"

    # Clean up
    rm "$TMP_KEY_FILE"
}
{{- end }}

function copyfile {
{{- if eq .chezmoi.os "darwin" }}
    cat $1 | pbcopy
{{- else }}
    cat $1 | xclip
{{- end }}
}

function showdockerlogs {
    co=$(sudo docker inspect --format={{ "{{.Name}}" }} $(sudo docker ps -aq --no-trunc) | sed 's/^.\(.*\)/\1/' | sort); for c_name in $co; do c_size=$(sudo docker inspect --format={{ "{{.ID}}" }} $c_name | xargs -I @ sh -c 'sudo ls -hl /var/lib/docker/containers/@/@-json.log' | awk '{print $5 }'); YE='\033[1;33m'; NC='\033[0m'; PI='\033[1;35m'; RE='\033[1;31m'; case "$c_size" in *"K"*) c_size=${YE}$c_size${NC};; *"M"*) p=${c_size%.*}; q=${p%M*}; r=${#q}; if [[ $r -lt 3 ]]; then c_size=${PI}$c_size${NC}; else c_size=${RE}$c_size${NC}; fi ;;  esac;  echo -e "$c_name $c_size"; done
}

{{ if eq .chezmoi.os "darwin" -}}
export DOCKER_CLIENT_TIMEOUT=360
export COMPOSE_HTTP_TIMEOUT=360
export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=true
export GPG_TTY=$(tty)
source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
defaults write .GlobalPreferences com.apple.mouse.scaling -1
{{- end }}
{{- if .ephemeral }}
# These environments usually are docker containers, and can't support FUSE appimages.
export APPIMAGE_EXTRACT_AND_RUN=1
{{- end }}

# FZF
# Set up fzf key bindings and fuzzy completion
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source <(fzf --zsh)

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git "
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git "

export FZF_DEFAULT_OPTS="--height 50% --layout=default --border --color=hl:#2dd4bf"
# fzf default for tmux
export FZF_TMUX_OPTS=" -p90%,70% "

# setup fzf previews
export FZF_CTRL_T_OPTS="--preview 'bat --color=always -n --line-range :500 {}'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"


if [[ -f ~/.config/secrets.env ]]; then
    source ~/.config/secrets.env
fi


{{- if stat (joinPath .chezmoi.homeDir ".pyenv") }}
export PYENV_ROOT="$HOME/.pyenv"

# Pyenv
if [[ -d $PYENV_ROOT/bin ]]; then
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi
{{- end }}


{{- if stat (joinPath .chezmoi.homeDir ".config/nvm") }}
export NVM_DIR="$XDG_CONFIG_HOME/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{{- end }}


{{- if stat (joinPath .chezmoi.homeDir ".cargo") }}
if [[ -d $HOME/.cargo ]]; then
    . "$HOME/.cargo/env"
fi
{{- end }}

eval "$(starship init zsh)"
